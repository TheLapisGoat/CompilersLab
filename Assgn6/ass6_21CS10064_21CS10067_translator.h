#ifndef __TRANSLATOR_H
#define __TRANSLATOR_H

#include <bits/stdc++.h>
using namespace std;

typedef enum {
    VOID,
    BOOL,
    CHAR,
    INT,
    FLOAT,
    ARRAY,
    POINTER,
    FUNCTION
} DataType;

/*
    An enum for all opcodes
*/
typedef enum  {
    ADD, SUB, MULT, DIV, MOD, SL, SR, 
    BW_AND, BW_OR, BW_XOR, 
    BW_U_NOT ,U_PLUS, U_MINUS, REFERENCE, DEREFERENCE, U_NEG, 
    GOTO_EQ, GOTO_NEQ, GOTO_GT, GOTO_GTE, GOTO_LT, GOTO_LTE, IF_GOTO, IF_FALSE_GOTO, 
    CtoI, ItoC, FtoI, ItoF, FtoC ,CtoF, 
    ASSIGNMENT, GOTO, RETURN, PARAM, CALL, ARR_INDEXING, ARR_ASSIGNMENT, FUNC_BEG, FUNC_END, L_DEREF
} opcode;

//Returns the opcode from the operation type
opcode get_opcode(string);

class symbol;
class symbolType;
class symbolValue;
class symbolTable;

class quad;
class quadArray;


/*
    External variables and methods generated by bison
*/
extern char* yytext;
extern int yyparse();



/*
    Class to represent the type of an element in the symbol table
*/
class symbolType {
public:
    int pointers;
    DataType type;
    DataType innerType;
    vector<int> dims;
};


/*
    Class to represent the value of an element in the symbol table
*/
class symbolValue {
public:
    int i;
    char c;
    float f;
    void* p;
};


/*
    Class to represent an element(entry) in the symbol table
*/
class symbol {
public:
    string name;
    symbolType type;
    symbolValue* initVal;
    int size;
    int offset;
    symbolTable* nestedTable;

    symbol();
};


/*
    Class to represent the symbol table data structure
*/
class symbolTable {
public:
    map<string, symbol*> table;
    vector<symbol*> symbols;
    int offset;
    static int tempCount;

    symbolTable();
    symbol* lookup(string name, DataType t = INT, int pc = 0);
    symbol* searchGlobal(string name);
    string gentemp(DataType t = INT);

    void print(string tableName);
};


/*
    Class to denote a quad in the Three Address Code translation
*/
class quad {
public:
    opcode op;
    string arg1;
    string arg2;
    string result;

    quad(string, string, string, opcode);

    string print();
};


/*
    Class to denote the entire list of quads for lazy spitting
*/
class quadArray {
public:
    vector<quad> quads;

    void print();
};


/*
    Class to represent a parameter
*/
class param {
public:
    string name;
    symbolType type;
};

/*
    Class to represent an expression 
*/
class expression {
public:
    int instr;
    DataType type;
    string loc;
    vector<int> truelist;
    vector<int> falselist;
    vector<int> nextlist;
    bool dereferenced;
    string* innerIndex;

    expression();
};


/*
    Class to represent a declaration
*/
class declaration {
public:
    string name;
    int pointers;
    DataType type;
    DataType innerType;
    vector<int> li;
    expression* initVal;
    int pc;
};

/*
    Function to return the next Instruction
*/
int nextInstruction();

/*
    Function to create quads given the opcode, arg1, arg2 and result
    Overloaded for different types of arguments. Can create quads for the expressions of the form:
        1. result = arg1 op arg2
        2. result = op arg1
        3. result = arg1
*/
void emit(string result, string arg1, string arg2, string op);
void emit(string result, int constant, string op);
void emit(string result, char constant, string op);
void emit(string result, float constant, string op);


/*
    A global function to create a new list containing only i, an index into the array of quads, 
    and to return a pointer to the newly created list
*/
vector<int> makelist(int i);

/*
    A global function to concatenate two lists list1 and list2 and to return a pointer to the concatenated list
*/
vector<int> merge(vector<int> l1, vector<int> l2);

/*
    A global function to insert address as the target label for each of the quads on the list l
*/
void backpatch(vector<int> l, int address);

/*
    Converts an int to a bool and adds required attributes
*/
void int2bool(expression* expr);

/*
    Auxiliary function to get the size of a type
*/
int sizeOfType(DataType t);

/*
    Auxiliary function to print a type
*/
string checkType(symbolType t);

/*
    Auxiliary function to get the initial value of a symbol
*/
string getInitVal(symbol* sym);

#endif